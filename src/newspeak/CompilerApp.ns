Newspeak3
'NS2PrimordialSoup'
class CompilerApp packageUsing: manifest = (
) (
class CommandLineCompiler usingPlatform: platform = (
|
	private List = platform collections List.
	private Map = platform collections Map.
	private Stopwatch = platform kernel Stopwatch.
	private ClassDeclarationBuilder = platform mirrors ClassDeclarationBuilder.
	private Port = platform actors Port.
	private Snapshotter = platform victoryFuel Snapshotter.
|
) (
childMain: args = (
	| stopwatch replyPort result |
	stopwatch:: Stopwatch new start.
	replyPort:: Port fromId: (args at: 2).
	result:: List new.

	3 to: args size do: [:index | result add: (compileFile: (args at: index))].

	('Worker done in ', stopwatch elapsedMilliseconds printString, ' ms') out.
	replyPort send: result asArray.
)
compileFile: filename = (
	| source builder |
	('Compiling ', filename) out.
	source:: readFileAsString: filename.
	builder:: ClassDeclarationBuilder fromUnitSource: source.
	^builder install applyToObject reflectee.
)
decodeUtf8: bytes = (
	|
	runes = List new.
	position ::= 0.
	a b c d
	|

	[position < bytes size] whileTrue:
		[a:: bytes at: 1 + position.
		 (a >> 7) = 0 ifTrue:
			[runes add: a.
			 position:: position + 1].

		 (a >> 5) = 2r110 ifTrue:
			[a:: a bitAnd: 2r11111.
			 b:: (bytes at: 2 + position) bitAnd: 2r111111.
			 runes add: (a << 6) + b.
			 position:: position + 2].

		 (a >> 4) = 2r1110 ifTrue:
			[a:: a bitAnd: 2r1111.
			 b:: (bytes at: 2 + position) bitAnd: 2r111111.
			 c:: (bytes at: 3 + position) bitAnd: 2r111111.
			 runes add: (a << 12) + (b << 6) + c.
			 position:: position + 3].

		 (a >> 3) = 2r11110 ifTrue:
			[a:: a bitAnd: 2r111.
			 b:: (bytes at: 2 + position) bitAnd: 2r111111.
			 c:: (bytes at: 3 + position) bitAnd: 2r111111.
			 d:: (bytes at: 4 + position) bitAnd: 2r111111.
			 runes add: (a << 18) + (b << 12) + (c << 6) + d.
			 position:: position + 4]].

	^String fromRunes: runes
)
public main: args = (
	(args at: 1) = 'child'
		ifTrue: [childMain: args]
		ifFalse: [parentMain: args].
)
parentMain: args = (
	|
	namespace = Map new.
	manifest = Manifest forNamespace: namespace.
	port = Port new.
	numJobs = 4.
	workLists
	stopwatch
	index ::= 1.
	outstanding ::= 0.
	|

	stopwatch:: Stopwatch new start.

	workLists:: Array new: numJobs.
	1 to: numJobs do: [:i | workLists at: i put: List new].
	[(args at: index) endsWith: '.ns'] whileTrue:
		[(workLists at: index \\ numJobs + 1) add: (args at: index).
		 index:: index + 1].

	workLists do:
		[:workList |
		 workList addFirst: port id.
		 workList addFirst: 'child'.
		 port spawn: workList asArray.
		 outstanding:: outstanding + 1].

	port handler:
		[:klasses |
		klasses do: [:klass | namespace at: klass name put: klass].
		outstanding:: outstanding - 1.
		outstanding = 0 ifTrue:
			[port close.
			 ('Compiled in ', stopwatch elapsedMilliseconds printString, ' ms') out.

			 [(index + 2) <= args size] whileTrue:
				[ | runtimeName appName snapshotName runtime app fuel bytes |
				runtimeName:: args at: index.
				appName:: args at: index + 1.
				snapshotName:: args at: index + 2.
				index:: index + 3.
				('Runtime configuration: ', runtimeName) out.
				('Application configuration: ', appName) out.

				runtime:: (namespace at: runtimeName) packageRuntimeUsing: manifest.
				app:: (namespace at: appName) packageUsing: manifest.

				stopwatch:: Stopwatch new start.
				bytes:: Snapshotter new snapshotApp: app withRuntime: runtime.
				writeBytes: bytes toFileNamed: snapshotName.

				('Serialized in ', stopwatch elapsedMilliseconds printString, ' ms') out]]].
)
readFileAsBytes: filename = (
	(* :literalmessage: primitive: 130 *)
	halt.
)
readFileAsString: filename = (
	^decodeUtf8: (readFileAsBytes: filename)
)
writeBytes: bytes toFileNamed: filename = (
	(* :literalmessage: primitive: 128 *)
	halt.
)
) : (
)
class Manifest forNamespace: ns = (|
namespace = ns.
|) (
protected doesNotUnderstand: message = (
	^namespace at: message selector ifAbsent: [Error signal: 'Missing ', message selector]
)
) : (
)
public main: platform args: args = (
	^(CommandLineCompiler usingPlatform: platform) main: args
)
) : (
)

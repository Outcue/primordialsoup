Newspeak3
'Mirrors'
class MirrorTesting usingPlatform: p minitest: m model: md = (|
private ObjectMirror = p mirrors ObjectMirror.
private ClassMirror = p mirrors ClassMirror.
private Set = p collections Set.
private TestContext = m TestContext.
private model = md.
|) (
public class ClassMirrorTests = TestBase () (
classOf: classMirror = (
	^(ObjectMirror reflecting: classMirror reflectee) getClass
)
public testClassMirrorEnclosingObject = (
	assert: (ClassMirror reflecting: model Klass) enclosingObject
	equals: (ObjectMirror reflecting: model).
	
	assert: (ObjectMirror reflecting: model) getClass enclosingObject
	equals: (ObjectMirror reflecting: nil).
	
	(* :todo: Cases with generalized mixin application *)
)
public testClassMirrorEquality = (
	| mirror mirror2 |
	mirror:: ClassMirror reflecting: model Klass.
	mirror2:: (ObjectMirror reflecting: (model Klass factory: 2)) getClass.
	assert: mirror equals: mirror2.
	assert: mirror2 equals: mirror.
	assert: mirror hash equals: mirror2 hash.
	deny: mirror equals: mirror mixin.
	deny: mirror2 equals: mirror2 mixin.
	deny: mirror equals: nil.
	deny: mirror2 equals: nil.
	deny: nil equals: mirror.
	deny: nil equals: mirror2.

	mirror:: (ObjectMirror reflecting: model) getClass.
	mirror2:: (ClassMirror reflecting: model Klass) enclosingObject getClass.
	assert: mirror equals: mirror2.
	assert: mirror2 equals: mirror.
	assert: mirror hash equals: mirror2 hash.
	deny: mirror equals: mirror mixin.
	deny: mirror2 equals: mirror2 mixin.
	deny: mirror equals: nil.
	deny: mirror2 equals: nil.
	deny: nil equals: mirror.
	deny: nil equals: mirror2.

	mirror:: ClassMirror reflecting: model Klass.
	mirror2:: (ObjectMirror reflecting: model) getClass.
	deny: mirror equals: mirror2.
	deny: mirror equals: mirror mixin.
	deny: mirror2 equals: mirror2 mixin.
	deny: mirror equals: nil.
	deny: mirror2 equals: nil.
	deny: nil equals: mirror.
	deny: nil equals: mirror2.
	
	(* Same mixin, same superclass, different enclosing object. *)
	mirror:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	mirror2:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	assert: mirror mixin equals: mirror2 mixin.
	deny: mirror equals: mirror2.
	deny: mirror2 equals: mirror.
)
public testClassMirrorIsMeta = (
	| mirror mirror2 |
	mirror:: ClassMirror reflecting: model Klass.
	deny: mirror isMeta.

	mirror:: (ObjectMirror reflecting: model Klass) getClass.
	assert: mirror isMeta.

	mirror:: (ObjectMirror reflecting: model) getClass.
	deny: mirror isMeta.
	
	mirror:: (ClassMirror reflecting: model Klass) enclosingObject getClass.
	deny: mirror isMeta.
	
	mirror:: ClassMirror reflecting: self class yourclass.
	assert: mirror isMeta.
)
public testClassMirrorMethods = (
	| object mirror |
	(* Fails because of all the stuff from ImplementationBase in Squeak *)
	object:: (ClassMirror reflecting: Object) mixin.
	mirror:: ClassMirror reflecting: model Klass.
	assertSet: ((mirror methods reject: [:method | method definingMixin = object]) 
		collect: [:method | method name]) 
	equals: {'superMethod'. '>>>'. 'defaultMethod'. 'keyword:method:'. 'privateMethod'. 'protectedMethod'. 'publicMethod'}.
)
public testClassMirrorName = (
	(* :todo: Should we answer the name with or without the hash?
	
	| mirror |
	mirror:: ClassMirror reflecting: model Klass.
	assert: mirror name equals: 'Klass'.

	mirror:: (ObjectMirror reflecting: (model Klass factory: 2)) getClass.
	assert: mirror name equals: 'Klass'.

	mirror:: (ObjectMirror reflecting: model) getClass.
	assert: mirror name equals: 'MirrorTestingModel'.

	mirror:: (ClassMirror reflecting: model Klass) enclosingObject getClass.
	assert: mirror name equals: 'MirrorTestingModel'.

	mirror:: ClassMirror reflecting: model Klass.
	assert: mirror name equals: 'Klass'.

	mirror:: (ObjectMirror reflecting: model) getClass.
	assert: mirror name equals: 'MirrorTestingModel'.
	
	mirror:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	assert: mirror name equals: 'Nested'.

	mirror:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	assert: mirror name equals: 'Nested'. *)
)
public testClassMirrorNestedClasses = (
	| mirror |
	mirror:: ClassMirror reflecting: model Klass.
	assertSet: (mirror nestedClasses collect: [:klass | klass name]) 
	equals: {'SuperNestedClass'. 'DefaultNestedClass'. 'Nested'. 'PrivateNestedClass'. 'ProtectedNestedClass'. 'PublicNestedClass'}.
)
public testClassMirrorNonBehavior = (
(* fails. Do we really want to assert on the type of every reflectee? *)
	should: [ClassMirror reflecting: 'Not a behavior'] signal: Error
)
public testClassMirrorSlots = (
	| mirror |
	mirror:: ClassMirror reflecting: model Klass.
	assertList: (mirror slots collect: [:slot | slot name]) 
	equals: {'superSlot'. 'publicSlot'. 'protectedSlot'. 'defaultSlot'. 'privateSlot'. 'mutableSlot'. 'immutableSlot'. 'uninitializedSlot'}.
)
public testClassMirrorSuperclass = (
	assert: (ClassMirror reflecting: model Klass) superclass
	equals: (ClassMirror reflecting: model SuperKlass).
	
	assert: (ClassMirror reflecting: model SuperKlass) superclass
	equals: (ClassMirror reflecting: Object).
	
	assert: (ClassMirror reflecting: Object) superclass
	equals: nil. (* fails in Squeak because the superclass of Object is ImplementationBase *)
	
	(* :todo: Cases with generalized mixin application *)
)
public testMetaRelationships = (
	|
	mClassMirrorTests = ClassMirror reflecting: class.
	mObject = ClassMirror reflecting: Object.
	mClass = (classOf: mClassMirrorTests) superclass.
	mMetaclass = classOf: (classOf: mClassMirrorTests).
	|
	assert: [mObject mixin name = 'Object' or: [mObject mixin name = '_Object']].
	assert: mClass mixin name equals: 'Class'.
	assert: mMetaclass mixin name equals: 'Metaclass'.
	
	assert: [mClass superclass = mObject
			or: [mClass superclass superclass = mObject]]
	description: 'Class superclass [superclass] = Object'.
	
	assert: (classOf: mObject) superclass equals: mClass.
	assert: (classOf: mClass) superclass equals: mClass.
	assert: (classOf: mClassMirrorTests) superclass equals: mClass.
	assert: (classOf: mMetaclass) superclass equals: mClass.
	
	assert: (classOf: (classOf: mObject)) equals: mMetaclass.
	assert: (classOf: (classOf: mClass)) equals: mMetaclass.
	assert: (classOf: (classOf: mMetaclass)) equals: mMetaclass.
	assert: (classOf: (classOf: mClassMirrorTests)) equals: mMetaclass.
)
) : (
TEST_CONTEXT = ()
public yourclass = (
	^self class
)
)
class ErrorOnEquals = () (
public = other = (
	^Error new signal
)
public class = (
	^Error new signal
)
public hash = (
	^Error new signal
)
) : (
)
public class MethodMirrorTests = TestBase () (
public testMethodMirrorAccessModifier = (
	| methods |
	methods:: (ClassMirror reflecting: model Klass) mixin methods.
	assert: (in: methods findMirrorNamed: 'defaultMethod') accessModifier equals: #protected.
	assert: (in: methods findMirrorNamed: 'privateMethod') accessModifier equals: #private.
	assert: (in: methods findMirrorNamed: 'protectedMethod') accessModifier equals: #protected.
	assert: (in: methods findMirrorNamed: 'publicMethod') accessModifier equals: #public.
)
public testMethodMirrorEquality = (
	| mirror mirror2 mirror3 methods |
	
	(* Different applications of the same mixin. *)
	mirror:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	mirror:: in: mirror methods findMirrorNamed: 'nestedMethod'.

	mirror2:: ClassMirror reflecting: (model Klass factory: 2) Nested.
	mirror2:: in: mirror2 methods findMirrorNamed: 'nestedMethod'.

	mirror3:: (ClassMirror reflecting: model Klass).
	mirror3:: in: mirror3 nestedClasses findMirrorNamed: 'Nested'.
	mirror3:: in: mirror3 instanceSide methods findMirrorNamed: 'nestedMethod'.

	assert: mirror equals: mirror2.
	assert: mirror2 equals: mirror3.
	assert: mirror3 equals: mirror.

	assert: mirror hash equals: mirror2 hash.
	assert: mirror2 hash equals: mirror3 hash.
	assert: mirror3 hash equals: mirror hash.
	
	(* Different methods. *)
	methods:: (ClassMirror reflecting: model Klass) mixin methods.
	mirror:: in: methods findMirrorNamed: 'protectedMethod'.
	mirror2:: in: methods findMirrorNamed: 'privateMethod'.
	mirror3:: in: methods findMirrorNamed: 'publicMethod'.

	deny: mirror equals: mirror2.
	deny: mirror2 equals: mirror3.
	deny: mirror3 equals: mirror.
	deny: mirror equals: nil.
	deny: nil equals: mirror.
)
) : (
TEST_CONTEXT = ()
)
public class MixinMirrorTests = TestBase () (
public testMixinMirrorDeclaration = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	assert: mirror declaration name equals: 'Klass'.
	assert: mirror declaration instanceSide equals: mirror.
	
	deny: mirror declaration equals: mirror. (* Even though they have the same reflectee. *)
	
	mirror:: (ObjectMirror reflecting: model Klass) getClass mixin.
	assert: mirror declaration name equals: 'Klass'.
	assert: mirror declaration classSide equals: mirror.
	
	deny: mirror declaration equals: mirror.
)
public testMixinMirrorEnclosingMixin = (
	| mirror mirror2 |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	mirror2:: (ObjectMirror reflecting: model) getClass mixin.
	assert: mirror enclosingMixin equals: mirror2.
	assert: mirror2 enclosingMixin equals: nil.
)
public testMixinMirrorEquality = (
	| mirror mirror2 |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	mirror2:: (ClassMirror reflecting: model Klass) mixin.
	assert: mirror equals: mirror2.
	assert: mirror hash equals: mirror2 hash.
	
	mirror:: (ObjectMirror reflecting: model) getClass mixin.
	mirror2:: (ObjectMirror reflecting: model) getClass mixin.
	assert: mirror equals: mirror2.
	assert: mirror hash equals: mirror2 hash.
	
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	mirror2:: (ObjectMirror reflecting: model) getClass mixin.
	deny: mirror equals: mirror2.
)
public testMixinMirrorIsMeta = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	deny: mirror isMeta.
	
	mirror:: mirror declaration classSide.
	assert: mirror isMeta.
)
public testMixinMirrorMethods = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	assertSet: (mirror methods collect: [:method | method name]) 
	equals: {'>>>'. 'defaultMethod'. 'keyword:method:'. 'privateMethod'. 'protectedMethod'. 'publicMethod'}.
	mirror methods do: [:method | assert: method definingMixin equals: mirror].
	
	mirror:: mirror declaration classSide.
	assertSet: (mirror methods collect: [:method | method name]) 
	equals: {'classMethod'}.
	mirror methods do: [:method | assert: method definingMixin equals: mirror].
)
public testMixinMirrorName = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	assert: mirror name equals: 'Klass'.  (* Not MirrorTestingModel`Klass *)
	
	mirror:: (ObjectMirror reflecting: model) getClass mixin.
	assert: mirror name equals: 'MirrorTestingModel'.
)
public testMixinMirrorNestedClasses = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	assertSet: (mirror nestedClasses collect: [:klass | klass name]) 
	equals: {'DefaultNestedClass'. 'Nested'. 'PrivateNestedClass'. 'ProtectedNestedClass'. 'PublicNestedClass'}.
	mirror nestedClasses do: [:klass | assert: klass definingMixin equals: mirror].

	mirror:: mirror declaration classSide.
	assertSet: (mirror nestedClasses collect: [:klass | klass name]) 
	equals: {}.
	mirror nestedClasses do: [:klass | assert: klass definingMixin equals: mirror].
)
public testMixinMirrorSlots = (
	| mirror |
	mirror:: (ClassMirror reflecting: model Klass) mixin.
	assertList: (mirror slots collect: [:slot | slot name]) 
	equals: {'publicSlot'. 'protectedSlot'. 'defaultSlot'. 'privateSlot'. 'mutableSlot'. 'immutableSlot'. 'uninitializedSlot'}.
	mirror slots do: [:slot | assert: slot definingMixin equals: mirror].
	
	mirror:: mirror declaration classSide.
	assertList: (mirror slots collect: [:slot | slot name]) 
	equals: {}.
	mirror slots do: [:slot | assert: slot definingMixin equals: mirror].
)
) : (
TEST_CONTEXT = ()
)
public class ObjectMirrorTests = TestBase () (
public testObjectMirrorEquality = (
	| a b |
	a:: ErrorOnEquals new.
	b:: ErrorOnEquals new.
	
	assert: (ObjectMirror reflecting: a) equals: (ObjectMirror reflecting: a).
	assert: (ObjectMirror reflecting: a) hash equals: (ObjectMirror reflecting: a) hash.
	
	deny: (ObjectMirror reflecting: a) equals: (ObjectMirror reflecting: b).

	deny: (ObjectMirror reflecting: a) equals: nil.
	deny: nil equals: (ObjectMirror reflecting: a).
)
public testObjectMirrorEvaluate = (
)
public testObjectMirrorGetClass = (
	| a |
	a:: ErrorOnEquals new.
	
	assert: (ObjectMirror reflecting: a) getClass equals: (ClassMirror reflecting: ErrorOnEquals).
	assert: (ObjectMirror reflecting: a) getClass reflectee equals: ErrorOnEquals.
)
public testObjectMirrorGetSlot = (
)
public testObjectMirrorPerform = (
)
public testObjectMirrorReflectee = (
	| obj |
	obj:: Object new.
	assert: (ObjectMirror reflecting: obj) reflectee equals: obj.
)
public testObjectMirrorSetClass = (
)
public testObjectMirrorSetClassShapeChange = (
)
public testObjectMirrorSetSlot = (
)
public testObjectMirrorSetSlotImmutable = (
)
) : (
TEST_CONTEXT = ()
)
public class SlotDeclarationMirrorTests = TestBase () (
public testSlotDeclarationMirrorAccessModifier = (
	| slots |
	slots:: (ClassMirror reflecting: model Klass) mixin slots.
	assert: (in: slots findMirrorNamed: 'defaultSlot') accessModifier equals: #protected.
	assert: (in: slots findMirrorNamed: 'privateSlot') accessModifier equals: #private.
	assert: (in: slots findMirrorNamed: 'protectedSlot') accessModifier equals: #protected.
	assert: (in: slots findMirrorNamed: 'publicSlot') accessModifier equals: #public.
)
public testSlotDeclarationMirrorIsMutable = (
	| slots |
	slots:: (ClassMirror reflecting: model Klass) mixin slots.
	assert: (in: slots findMirrorNamed: 'mutableSlot') isMutable.
	deny: (in: slots findMirrorNamed: 'immutableSlot') isMutable.
	assert: (in: slots findMirrorNamed: 'uninitializedSlot') isMutable.
)
) : (
TEST_CONTEXT = ()
)
class TestBase = TestContext () (
assertSet: actual equals: expected = (
	| missing extra missingString extraString |
	missing:: Set new.
	missing addAll: expected.
	actual do: [:element | missing remove: element ifAbsent: []].
	extra:: Set new.
	extra addAll: actual.
	expected do: [:element | extra remove: element ifAbsent: []].
	(missing isEmpty and: [extra isEmpty]) ifTrue: [^self].	
	
	missingString: ''.
	missing do: [:element | missingString: missingString, ' ', element printString].
	extraString: ''.
	extra do: [:element | extraString: extraString, ' ', element printString].
	
	failWithMessage: 'Missing:', missingString, ' Extra:', extraString.
)
in: collection findMirrorNamed: name = (
	collection do: [:mirror | mirror name = name ifTrue: [^mirror]].
	^nil
)
) : (
)
) : (
)

Newspeak3
'Mirrors'
class MirrorBuilderTesting usingPlatform: p minitest: m = (|
private ClassDeclarationBuilder = p mirrors ClassDeclarationBuilder.
private ClassMirror = p mirrors ClassMirror.
private ObjectMirror = p mirrors ObjectMirror.
private MessageNotUnderstood = p kernel MessageNotUnderstood.
private TestContext = m TestContext.
|) (
public class ClassDeclarationBuilderTests = TestContext () (
'as yet unclassified'
assert: instance isInstanceOf: expectedClass = (
	| actualClass = (ObjectMirror reflecting: instance) getClass reflectee. |
	assert: actualClass equals: expectedClass.
)
assertList: actual equals: expected = (
	1 to: actual size do: 
		[:index | assert: (actual at: index) equals: (expected at: index)].
)
classFromSource: src <String> ^<Class> = (
	^(ClassDeclarationBuilder fromSource: src) install applyToObject reflectee
)
emptyClassSource ^ <String> = (
	^'class EmptyClass = ()()'
)
in: collection findMirrorNamed: name = (
	collection do: [:mirror | mirror name = name ifTrue: [^mirror]].
	^nil
)
newClass ^ <Class> = (
	^classFromSource: emptyClassSource
)
public testClassDeclAddMethod = (
	(* add a new method *)
	| 
	klass <Class> 
	instance
	builder <ClassDeclarationBuilder> 
	|
	klass:: classFromSource: 'class EmptyClass = ()()'.
	instance:: klass new.
	should: [instance foo: 3] signal: MessageNotUnderstood. 
	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder instanceSide methods addFromSource: 'public foo: x = (^x * x)'.
	should: [instance foo: 3] signal: MessageNotUnderstood. 
	builder install.
      assert: (instance foo: 3) equals: 9.
)
public testClassDeclAddNestedClass = (
	(* add a new nested class decl *)
	| 
	klass <Class> 
	instance
	builder <ClassDeclarationBuilder> 
	|
	klass:: classFromSource: 'class EmptyClass = ()()'.
	instance:: klass new.
	should: [instance Nested] signal: MessageNotUnderstood.
	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder instanceSide nestedClasses addFromSource: 'public class Nested = ()(''cat'' public foo = (^91))'.
	should: [instance Nested] signal: MessageNotUnderstood.
	builder install.
	assert: instance Nested new foo equals: 91.
)
public testClassDeclAddSlot = (
	(* add a new slot *)
	| 
	klass <Class> 
	instance <Object>
	builder <ClassDeclarationBuilder> 
	|
	klass:: classFromSource: 'class EmptyClass = ()()'.
	instance:: klass new.
	should: [instance newSlot] signal: MessageNotUnderstood.
	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder headerFromSource: 'class EmptyClass = ( | public newSlot ::= 91. | )'.
	should: [instance newSlot] signal: MessageNotUnderstood.
	builder install.
	instance:: klass new.
	assert: instance newSlot equals: 91.
	instance newSlot: 101.
	assert: instance newSlot equals: 101.	
)
public testClassDeclCopyNested = (
	(* The bug here seems to be the copy doesn't get its qualified name patched. *)
	| 
	topBuilder <ClassDeclarationBuilder>
	topClass
	origBuilder
	origMirror
	copyBuilder
	copySource
	copyMirror
	topMirror
	|
	topBuilder:: ClassDeclarationBuilder fromSource: 'class Top = ()()'.
	topClass:: topBuilder install applyToObject reflectee.
	
	origBuilder:: topBuilder instanceSide nestedClasses addFromSource: 'class TheOriginal = ()()'.
	origMirror:: origBuilder install.
	assert: origMirror name equals: 'TheOriginal'.
	assert: origMirror accessModifier equals: #protected.

	copyBuilder:: ClassDeclarationBuilder fromSource: origMirror source.
	copyBuilder header name: 'TheCopy'.
	copySource:: copyBuilder source.
	copyBuilder:: topBuilder instanceSide nestedClasses addFromSource: copySource.
	copyMirror:: copyBuilder install.
	assert: copyMirror name equals: 'TheCopy'.
	assert: copyMirror accessModifier equals: #protected.
	
	assert: origMirror name equals: 'TheOriginal'. (* Unchanged *)
	assert: origMirror accessModifier equals: #protected.
	
	topMirror:: (ClassMirror reflecting: topClass) mixin declaration.
	(* Both nested classes are present. *)
	assert: (in: topMirror instanceSide nestedClasses findMirrorNamed: #TheOriginal) accessModifier equals: #protected.
	assert: (in: topMirror instanceSide nestedClasses findMirrorNamed: #TheCopy) accessModifier equals: #protected.
)
public testClassDeclCopyTopLevel = (
	| 
	origBuilder
	origMirror
	origClass
	copyBuilder
	copyMirror
	copyClass
	|
	origBuilder:: ClassDeclarationBuilder fromSource: 'class TheOriginal = ()()'.
	origClass:: origBuilder install applyToObject reflectee.
	origMirror:: (ClassMirror reflecting: origClass) mixin declaration.
	assert: origMirror name equals: 'TheOriginal'.
	assert: origMirror accessModifier equals: #public.
	
	copyBuilder:: ClassDeclarationBuilder fromSource: origMirror source.
	copyBuilder header name: 'TheCopy'.
	copyClass:: copyBuilder install applyToObject reflectee.
	copyMirror:: (ClassMirror reflecting: copyClass) mixin declaration.
	assert: copyMirror name equals: 'TheCopy'.
	assert: copyMirror accessModifier equals: #public.
	
	assert: origMirror name equals: 'TheOriginal'. (* Unchanged *)
	assert: origMirror accessModifier equals: #public.
)
public testClassDeclModifySlot = (
	(* modify the declaration of an existing slot *)
	| 
	klass <Class> 
	instance <Object>
	builder <ClassDeclarationBuilder> 
	|
	klass:: classFromSource: 'class TestClassDeclModifySlot = ( | public x ::= 117. public y = 0. public z | )()'.
	instance:: klass new.
	assert: instance x equals: 117.
	assert: instance y equals: 0.
	assert: instance z equals: nil.
	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder headerFromSource: 'class TestClassDeclModifySlot = ( | public x ::= 120. public y = 0. public z | )'.
	assert: instance x equals: 117.
	assert: instance y equals: 0.
	assert: instance z equals: nil.
	builder install.
	assert: instance x equals: 117.
	assert: instance y equals: 0.
	assert: instance z equals: nil.
	instance:: klass new.
	assert: instance x equals: 120.
	assert: instance y equals: 0.
	assert: instance z equals: nil.
)
public testClassDeclRemoveMethod = (
	(* remove an existing method *)
	| 
	klass <Class>
	instance
	builder <ClassDeclarationBuilder> 
	|
	klass:: classFromSource: 'class TestClassDeclRemoveMethod = ()(
		''unclassified''
		public foo = (^91)
		public bar = (^42)
	)'.
	instance:: klass new.
	assert: instance foo equals: 91.
	assert: instance bar equals: 42.
	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder instanceSide methods removeMirrorNamed: #foo.
	assert: instance foo equals: 91.
	assert: instance bar equals: 42.
	builder install.
	should: [instance foo] signal: MessageNotUnderstood.
	assert: instance bar equals: 42.
)
public testClassDeclRemoveNestedClass = (
	(* remove an existing nested class *)
	| 
	klass <Class>
	instance
	builder <ClassDeclarationBuilder> 
	|
	klass:: classFromSource: 'class TestClassDeclRemoveNestedClass = ()(
		public class Nested = ()() : ( ''cat'' public foo = (^70) )
	)'.
	instance:: klass new.
	assert: instance Nested foo equals: 70.
	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder instanceSide nestedClasses removeMirrorNamed: #Nested.
	assert: instance Nested foo equals: 70.
	builder install.
	should: [instance Nested] signal: MessageNotUnderstood.
)
public testClassDeclRemoveNonExistentMethod = (
	(* remove a non-existing method. The effect should be to do nothing, so our only goal here is to run without error *)
	| 
	klass <Class> 
	builder <ClassDeclarationBuilder> 
	|
	klass:: classFromSource: 'class TestClassDeclRemoveMethod = ()(
		''unclassified''
		foo = (^91)
	      bar = (^42)
	)'.
	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder instanceSide methods removeMirrorNamed: #baz.
)
public testClassDeclRemoveNonExistentNestedClass = (
	(* remove a non-existing nested class. The effect should be to do nothing, so our only goal here is to run without error *)
	| 
	klass <Class> 
	builder <ClassDeclarationBuilder> 
	|
	klass:: classFromSource: 'class TestClassDeclRemoveNonExistantNestedClass = ()()'.
	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder instanceSide nestedClasses removeMirrorNamed: #Nested.
)
public testClassDeclRemoveSlot = (
	(* remove an existing slot *)
	| 
	klass <Class>
	instance
	builder <ClassDeclarationBuilder> 
	|
	klass:: classFromSource: 'class TestClassDeclRemoveSlot = ( | public x ::= 117. public y = 0. public z | )()'.
	instance:: klass new.
	assert: instance x equals: 117.
	assert: instance y equals: 0.
	assert: instance z equals: nil.
	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder headerFromSource: 'class TestClassDeclRemoveSlot = ( | public x ::= 117. public y = 0. | )'.
	assert: instance x equals: 117.
	assert: instance y equals: 0.
	assert: instance z equals: nil.
	builder install.
	assert: instance x equals: 117.
	assert: instance y equals: 0.
	should: [instance z] signal: MessageNotUnderstood.
)
public testClassDeclRenameNested = (
	| 
	enclosingBuilder <ClassDeclarationBuilder>
	enclosingClass
	cls
	builder
	|
	enclosingBuilder:: ClassDeclarationBuilder fromSource: 
'class Enclosing = ()(
	class OldName = ()()
	''cat'' public getOldName = (^self OldName)
)'.
	enclosingClass:: enclosingBuilder install applyToObject reflectee.
	cls:: enclosingClass new getOldName.
	
	assert: (ClassMirror reflecting: cls) mixin name equals: 'OldName'.
	assert: (ClassMirror reflecting: cls) mixin declaration accessModifier equals: #protected.
	
	builder:: (ClassMirror reflecting: cls) mixin declaration asBuilder.
	builder header name: 'NewName'.
	builder install.
	
	assert: (ClassMirror reflecting: cls) mixin name equals: 'NewName'.
	assert: (ClassMirror reflecting: cls) mixin declaration accessModifier equals: #protected.
)
public testClassDeclRenameNestedPrivate = (
	| 
	enclosingBuilder <ClassDeclarationBuilder>
	enclosingClass
	cls
	builder
	|
	enclosingBuilder:: ClassDeclarationBuilder fromSource: 
'class Enclosing = ()(
	private class OldName = ()()
	''cat'' public getOldName = (^self OldName)
)'.
	enclosingClass:: enclosingBuilder install applyToObject reflectee.
	cls:: enclosingClass new getOldName.
	
	assert: (ClassMirror reflecting: cls) mixin name equals: 'OldName'.
	assert: (ClassMirror reflecting: cls) mixin declaration accessModifier equals: #private.
	
	builder:: (ClassMirror reflecting: cls) mixin declaration asBuilder.
	builder header name: 'NewName'.
	builder install.
	
	assert: (ClassMirror reflecting: cls) mixin name equals: 'NewName'.
	assert: (ClassMirror reflecting: cls) mixin declaration accessModifier equals: #private.
)
public testClassDeclRenameTopLevel = (
	| 
	builder <ClassDeclarationBuilder>
	cls 
	builder2
	|
	builder:: ClassDeclarationBuilder fromSource: 'class OldName = ()()'.
	cls:: builder install applyToObject reflectee.
	
	assert: (ClassMirror reflecting: cls) mixin name equals: 'OldName'.
	assert: (ClassMirror reflecting: cls) mixin declaration accessModifier equals: #public.
	
	builder2:: (ClassMirror reflecting: cls) mixin declaration asBuilder.
	builder2 header name: 'NewName'.
	builder2 install.

	assert: (ClassMirror reflecting: cls) mixin name equals: 'NewName'.
	assert: (ClassMirror reflecting: cls) mixin declaration accessModifier equals: #public.
)
public testClassDeclReplaceMethod = (
	(* replace an existing method *)
	| 
	klass <Class> 
	instance
	builder <ClassDeclarationBuilder> 
	|
	klass:: classFromSource: 'class TestClassDeclReplaceMethod = ()(
		''unclassified''
		public foo = (^#before)
	)'.
	instance:: klass new.
	assert: instance foo equals: #before.
	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder instanceSide methods addFromSource: 'public foo = (^#after)'.
	assert: instance foo equals: #before.
	builder install.
	assert: instance foo equals: #after.
)
public testClassDeclReplaceNestedClass = (
	(* replace an existing nested class *)
	|
	builder
	klass
	instance
	nestedKlass
	|
	
	klass:: classFromSource: 'class TestClassDeclReplaceNestedClass = ()(
		public class Nested = ()() : (''cat'' public foo = (^#before))
	)'.
	instance:: klass new.
	nestedKlass:: instance Nested.
	assert: nestedKlass foo equals: #before.
	assert: instance Nested foo equals: #before.

	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder instanceSide nestedClasses addFromSource:
'public class Nested = ()() : (''cat'' public foo = (^#after))'.
	assert: nestedKlass foo equals: #before.
	assert: instance Nested foo equals: #before.

	builder install.
	assert: nestedKlass foo equals: #before.
	assert: instance Nested foo equals: #before.

	assert: klass new Nested foo equals: #after.
)
public testClassDeclReplaceSlot = (
	(* replace an existing slot *)
	| 
	klass <Class> 
	instance <Object>
	builder <ClassDeclarationBuilder> 
	|
	klass:: classFromSource: 'class TestClassDeclReplaceSlot = ( | public x ::= 117. public y = 0. public z | )()'.
	instance:: klass new.
	assert: instance x equals: 117.
	assert: instance y equals: 0.
	assert: instance z equals: nil.
	should: [instance a] signal: MessageNotUnderstood.
	builder:: (ClassMirror reflecting: klass) mixin declaration asBuilder.
	builder headerFromSource: 'class TestClassDeclReplaceSlot = ( | public a ::= 120. public y = 0. public z | )'.
	assert: instance x equals: 117.
	assert: instance y equals: 0.
	assert: instance z equals: nil.
	should: [instance a] signal: MessageNotUnderstood.
	builder install.
	should: [instance x] signal: MessageNotUnderstood.
	assert: instance y equals: 0.
	assert: instance z equals: nil.
	assert: instance a equals: nil.
	instance:: klass new.
	should: [instance x] signal: MessageNotUnderstood.
	assert: instance y equals: 0.
	assert: instance z equals: nil.
	assert: instance a equals: 120.
)
public testConflictingMethodOverFactory = (
	| builder |
	builder:: ClassDeclarationBuilder fromSource: 'class Conflicted foo = ()()'.
	should: [builder classSide methods addFromSource: 'foo = ()'] signal: Error.
)
public testConflictingMethodOverNestedClass = (
	| builder |
	builder:: ClassDeclarationBuilder fromSource: 'class Conflicted = ()(
		class foo = ()()
	)'.
	should: [builder instanceSide methods addFromSource: 'foo = ()'] signal: Error.
)
public testConflictingMethodOverSlot = (
	| builder |
	builder:: ClassDeclarationBuilder fromSource: 'class Conflicted = (| foo bar = 1. |)()'.
	should: [builder instanceSide methods addFromSource: 'foo = ()'] signal: Error.
	should: [builder instanceSide methods addFromSource: 'foo: x = ()'] signal: Error.
	should: [builder instanceSide methods addFromSource: 'bar = ()'] signal: Error.
	builder instanceSide methods addFromSource: 'bar: x = ()'.
)
public testConflictingNestedClassOverMethod = (
	| builder |
	builder:: ClassDeclarationBuilder fromSource: 'class Conflicted = ()(''cat'' foo = ())'.
	should: [builder instanceSide nestedClasses addFromSource: 'class foo = ()()'] signal: Error.
)
public testConflictingNestedClassOverSlot = (
	| builder |
	builder:: ClassDeclarationBuilder fromSource: 'class Conflicted = (| foo |)()'.
	should: [builder instanceSide nestedClasses addFromSource: 'class foo = ()()'] signal: Error.
)
public testConflictingSlotOverMethod = (
	| builder |
	builder:: ClassDeclarationBuilder fromSource: 'class Conflicted = ()(
		''cat'' foo = ()
	)'.
	should: [builder headerFromSource: 'Conflicted = (| foo |)'] signal: Error.
)
public testConflictingSlotOverNestedClass = (
	| builder |
	builder:: ClassDeclarationBuilder fromSource: 'class Conflicted = ()(
		class foo = ()()
	)'.
	should: [builder headerFromSource: 'Conflicted = (| foo |)'] signal: Error.
)
public testIncrementalScopeBuilding = (
	(* add a new method *)
	| 
	builder <ClassDeclarationBuilder> 
	klass <Class>
	ooter
	inner
	r
	|
	builder:: ClassDeclarationBuilder fromSource:
'class Outer = ( | public outerSlot = 1. | )(
	public class Inner = ( | public innerSlot = 3. | )(
		public class InnerInner = ()()
		''cat'' public innerMethod = (^4)
	)
	public class Sibling = ()()
	''cat'' public outerMethod = (^2)
)'.
	klass:: builder install applyToObject reflectee.
	ooter:: klass new.
	inner:: ooter Inner new.

	(* Incremental eval *)
	r:: (ObjectMirror reflecting: inner) 
		evaluate: '{outer Outer. outerSlot. outerMethod. outer Inner. innerSlot. innerMethod. Inner. Sibling. InnerInner}'
		ifCompilerError: [ compileTimeFail ] ifError: [ runtimeFail ].
	assertList: r reflectee equals: {ooter. ooter outerSlot. ooter outerMethod. inner. inner innerSlot. inner innerMethod. ooter Inner. ooter Sibling. inner InnerInner.}.
	
	(* Incremental method *)
	(in: builder instanceSide nestedClasses findMirrorNamed: #Inner) instanceSide methods addFromSource: 'public testMethod = (^{outer Outer. outerSlot. outerMethod. outer Inner. innerSlot. innerMethod. Inner. Sibling. InnerInner})'.
	builder install.
	assertList: inner testMethod equals: {ooter. ooter outerSlot. ooter outerMethod. inner. inner innerSlot. inner innerMethod. ooter Inner. ooter Sibling. inner InnerInner.}.
	
	(* Incremental header *)
	(in: builder instanceSide nestedClasses findMirrorNamed: #Inner) headerFromSource: 'public class Inner = ( | public innerSlot = 33. public testSlot = {outer Outer. outerSlot. outerMethod. outer Inner. innerSlot. innerMethod. Inner. Sibling. InnerInner}. |)'.
	builder install.
	inner:: ooter Inner new.
	assertList: inner testSlot equals: {ooter. ooter outerSlot. ooter outerMethod. inner. inner innerSlot. inner innerMethod. ooter Inner. ooter Sibling. inner InnerInner.}.
	
	(* Incremental nested class *)
	builder instanceSide nestedClasses addFromSource: 'public class Inner2 = ( | public innerSlot = 333. | )(
		public class InnerInner = ()()
		''cat'' public innerMethod = (^444)
		public testMethod = (^{outer Outer. outerSlot. outerMethod. outer Inner2. innerSlot. innerMethod. Inner2. Sibling. InnerInner})
	)'.
	builder install.
	inner:: ooter Inner2 new.
	assertList: inner testMethod equals: {ooter. ooter outerSlot. ooter outerMethod. inner. inner innerSlot. inner innerMethod. ooter Inner2. ooter Sibling. inner InnerInner.}.
)
) : (
'test markers'
TEST_CONTEXT = ()
)
) : (
)

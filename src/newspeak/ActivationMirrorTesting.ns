Newspeak3
'Mirrors'
class ActivationMirrorTesting usingPlatform: p minitest: m = (|
private ClassDeclarationBuilder = p mirrors ClassDeclarationBuilder.
private ObjectMirror = p mirrors ObjectMirror.
private ActivationMirror = p mirrors ActivationMirror.
private Message = p kernel Message.
private List = p collections List.
private TestContext = m TestContext.
|) (
public class ActivationTests = TestBase () (
add: x to: y = (
	| z |
	z:: x + y.
	^z
)
compilationError = (
	^Error
)
currentSnippet: thread = (
	| source range |
	source:: thread suspendedActivation method source.
	range:: thread suspendedActivation sourceRange.
	^source copyFrom: range start to: range stop.
)
quickResumeReturnAcrossBoundry = (
	| closure thread activation |
	closure:: [^'escaping simulation!'].
	thread:: ActivationMirror invokeSuspended: closure.
	assert: thread isSuspended.
	activation:: thread suspendedActivation.
	assert: activation closure equals: (ObjectMirror reflecting: closure).
	assert: activation receiver equals: (ObjectMirror reflecting: self).
	assert: activation method name equals: #quickResumeReturnAcrossBoundry.
	assert: activation sender equals: nil.

	thread resume.
	assert: thread isBroken.
	assert: thread suspendedActivation equals: nil.
	assert: (thread result reflectee printString startsWith: 'CannotReturn').

	^'expected return'
)
seven = (
	^[3 + 4]
)
stackOf: thread = (
	| names activation |
	names:: List new.
	activation:: thread suspendedActivation.
	[nil = activation] whileFalse:
		[names add: activation method name.
		 activation:: activation sender].
	^names
)
public testActivationEvaluate = (
	| closure thread activation eval |
	closure:: [add: 3 to: 4].
	thread:: ActivationMirror invokeSuspended: closure.
	assert: thread isSuspended.
	thread stepInto. (* Push 3 *)
	thread stepInto. (* Push 4 *)
	thread stepInto. (* Send add:to: *)
	activation:: thread suspendedActivation.
	assert: activation receiver equals: (ObjectMirror reflecting: self).
	assert: activation method name equals: #add:to:.

	eval:: activation evaluate: 'x'.
	assert: eval isFulfilled.
	assert: eval result reflectee equals: 3.
	
	eval:: activation evaluate: 'y'.
	assert: eval isFulfilled.
	assert: eval result reflectee equals: 4.
	
	eval:: activation evaluate: 'z'.
	assert: eval isFulfilled.
	assert: eval result reflectee equals: nil.
	
	eval:: activation evaluate: 'self'.
	assert: eval isFulfilled.
	assert: eval result reflectee equals: self.
	
	should: [activation evaluate: '++'] signal: compilationError.

	eval:: activation evaluate: 'w'.
	assert: eval isBroken.
	assert: eval result getClass mixin name equals: 'MessageNotUnderstood'.
)
public testActivationSourceRange = (
	| closure thread activation eval |
	closure:: [add: 3 to: 4].
	thread:: ActivationMirror invokeSuspended: closure.
	assert: thread isSuspended.
	
	assert: (currentSnippet: thread) equals: '3'.
	thread stepInto. (* Push 3 *)
	
	assert: (currentSnippet: thread) equals: '4'.
	thread stepInto. (* Push 4 *)

	assert: (currentSnippet: thread) equals: 'add: 3 to: 4'.
	thread stepInto. (* Send add:to: *)
)
public testClosureActivation = (
	| closure thread activation |
	closure:: seven.
	thread:: ActivationMirror invokeSuspended: closure.
	assert: thread isSuspended.
	activation:: thread suspendedActivation.
	assert: activation closure equals: (ObjectMirror reflecting: closure).
	assert: activation receiver equals: (ObjectMirror reflecting: self).
	assert: activation method name equals: #seven.
	assert: activation sender equals: nil.
)
public testClosureActivationStepInto = (
	| thread activation |
	thread:: ActivationMirror invokeSuspended: seven.
	assert: thread isSuspended.
	thread stepInto. (* Push 3 *)
	assert: thread isSuspended.
	assertList: (stackOf: thread) equals: {#seven}.
	thread stepInto. (* Push 4 *)
	assert: thread isSuspended.
	assertList: (stackOf: thread) equals: {#seven}.
	thread stepInto. (* Send + *)
	assert: thread isSuspended.
	assertList: (stackOf: thread) equals: {#seven}.
	thread stepInto. (* Return 7 *)
	assert: thread isFulfilled.
	assert: thread result equals: (ObjectMirror reflecting: 7).
	assertList: (stackOf: thread) equals: {}.
)
public testEvaluateActivation = (
	| closure thread activation |
	thread:: (ObjectMirror reflecting: self) evaluateSuspended: '3 + 4'.
	assert: thread isSuspended.
	activation:: thread suspendedActivation.
	assert: activation closure equals: nil.
	assert: activation receiver equals: (ObjectMirror reflecting: self).
	assert: activation method name equals: #DoIt.
	assert: activation sender equals: nil.
)
public testEvaluateActivationStepInto = (
	| thread activation |
	thread:: (ObjectMirror reflecting: self) evaluateSuspended: '3 + 4'.
	assert: thread isSuspended.
	thread stepInto. (* Push 3 *)
	assert: thread isSuspended.
	thread stepInto. (* Push 4 *)
	assert: thread isSuspended.
	thread stepInto. (* Send + *)
	assert: thread isSuspended.
	thread stepInto. (* Return 7 *)
	assert: thread isFulfilled.
	assert: thread result equals: (ObjectMirror reflecting: 7).
	assert: thread suspendedActivation equals: nil.
)
public testQuickResumeReturnAcrossBoundry = (
	assert: quickResumeReturnAcrossBoundry equals: 'expected return'
)
public testQuickResumeUnhandledException = (
	| exception = Exception new. closure thread activation |
	closure:: [exception signal].

	thread:: ActivationMirror invokeSuspended: closure.
	assert: thread isSuspended.
	thread resume.
	assert: thread isBroken.
	assert: thread suspendedActivation equals: nil.
	assert: thread result reflectee equals: exception.
)
) : (
TEST_CONTEXT = ()
)
public class SimulationTests = SuperSimulationTests (
(* Test that the Newspeak bytecodes run under image-side simulation and return the same results as the VM. *)
) (
assertSimulation: block answers: expectedResult = (
	| thread |
	thread:: ActivationMirror invokeSuspended: block.
	thread resumeSlowly.
	assert: thread isFulfilled message: 'Expected thread fulfilled'.
	assert: thread result reflectee equals: expectedResult.
)
assertSimulation: block signals: exceptionTestBlock = (
	| thread |
	thread:: ActivationMirror invokeSuspended: block.
	thread resumeSlowly.
	assert: thread isBroken message: 'Expected thread broken'.
	exceptionTestBlock value: thread result reflectee.
)
public bar = (
	^'bar'
)
public barWithArg: n = (
	^n + 20
)
cannotReturn = (
	^[^42]
)
ensure1 = (
	[^'try-block'] ensure: [^'ensure-block'].
	^'afterward'
)
ensure2 = (
	^['try-block'] ensure: ['ensure-block'].
)
ensure3 = (
	[^'try-block'] ensure: ['ensure-block'].
	^'afterward'
)
foo = (
	^'sub'
)
fooWithArg: n = (
	^'sub'
)
simulationCannotReturnAcrossBoundry = (
	assertSimulation: [^'escaping simulation!'] signals:
		[:simulatedException |
		 assert: (simulatedException printString startsWith: 'CannotReturn').
		 assert: simulatedException result equals: 'escaping simulation!'].
	^'expected return'
)
public testSimulationCannotReturn = (
	assertSimulation: [cannotReturn value] signals:
		[:simulatedException |
		 assert: (simulatedException printString startsWith: 'CannotReturn').
		 assert: simulatedException result equals: 42].
)
public testSimulationCannotReturnAcrossBoundry = (
	assert: simulationCannotReturnAcrossBoundry equals: 'expected return'.
)
public testSimulationEnclosingObject = (
	assertSimulation: [outer SimulationTests] answers: outer SimulationTests.
	assertSimulation: [outer ActivationMirrorTesting] answers: outer ActivationMirrorTesting.
)
public testSimulationImplicitReceiverSend = (
	assertSimulation: [foo] answers: 'sub'.
	assertSimulation: [fooWithArg: 1] answers: 'sub'.
	assertSimulation: [baz] answers: 'enclosing'.
)
public testSimulationJump = (
	| mirror = ObjectMirror reflecting: self. |
	
	"a" isString ifFalse: [^self]. (* This fails badly enough on Squeak to lock up the UI. *)
	
	assertSimulation: [mirror evaluate: 'foo' ifCompilerError: [:e | fail] ifError: [:e | fail]] 
	answers: (mirror evaluate: 'foo' ifCompilerError: [:e | fail] ifError: [:e | fail]).	
)
public testSimulationNonBooleanReceiver = (
	assertSimulation: [0 ifTrue: [1]]
	signals: [:simulatedException | assert: (simulatedException printString startsWith: 'NonBooleanReceiver')].
	
	assertSimulation: [0 ifFalse: [1]]
	signals: [:simulatedException | assert: (simulatedException printString startsWith: 'NonBooleanReceiver')].
)
public testSimulationOuterSend = (
	assertSimulation: [outer SimulationTests foo] answers: 'sub'.
	assertSimulation: [outer SimulationTests fooWithArg: 1] answers: 'sub'.
	assertSimulation: [outer ActivationMirrorTesting foo] answers: 'enclosing'.
	assertSimulation: [outer ActivationMirrorTesting fooWithArg: 1] answers: 'enclosing'.
)
public testSimulationPerform0 = (
	| message = Message selector: #bar arguments: {}. |
	assertSimulation: [message sendTo: self] answers: (message sendTo: self).
)
public testSimulationPerform1 = (
	| message = Message selector: #barWithArg: arguments: {7}. |
	assertSimulation: [message sendTo: self] answers: (message sendTo: self).
)
public testSimulationSelfSend = (
	assertSimulation: [self foo] answers: 'sub'.
	assertSimulation: [self fooWithArg: 1] answers: 'sub'.
)
public testSimulationSuperSend = (
	assertSimulation: [super foo] answers: 'super'.
	assertSimulation: [super fooWithArg: 1] answers: 'super'.
)
public testSimulationUnhandledException = (
	| exception = Exception new. |
	assertSimulation: [exception signal]
	signals: [:simulatedException | assert: simulatedException equals: exception].
)
public testSimulationUnwindProtect = (
	assertSimulation: [ensure1] answers: 'ensure-block'.
	assertSimulation: [ensure2] answers: 'try-block'.
	assertSimulation: [ensure3] answers: 'try-block'.
)
public testSimulationValue0 = (
	| copied indirect closure |
	copied:: 1.
	indirect:: 2.
	closure:: [copied + indirect].
	assertSimulation: [closure value] answers: closure value.
	indirect:: 4. (* write after capture forces use of indirection vector *)
)
public testSimulationValue1 = (
	| copied indirect closure |
	copied:: 1.
	indirect:: 2.
	closure:: [:x | copied + indirect + x].
	assertSimulation: [closure value: 4] answers: (closure value: 4).
	indirect:: 4. (* write after capture forces use of indirection vector *)
)
public testSimulationValue2 = (
	| copied indirect closure |
	copied:: 1.
	indirect:: 2.
	closure:: [:x :y | copied + indirect + x - y].
	assertSimulation: [closure value: 4 value: 8] answers: (closure value: 4 value: 8).
	indirect:: 4. (* write after capture forces use of indirection vector *)
)
public testSimulationValue3 = (
	| copied indirect closure |
	copied:: 1.
	indirect:: 2.
	closure:: [:x :y :z | copied + indirect + x - y * z].
	assertSimulation: [closure value: 4 value: 8 value: 16] answers: (closure value: 4 value: 8 value: 16).
	indirect:: 4. (* write after capture forces use of indirection vector *)
)
public testSimulationValueArray = (
	| copied indirect closure |
	copied:: 1.
	indirect:: 2.
	closure:: [:x :y :z | copied + indirect + x - y * z].
	assertSimulation: [closure valueWithArguments: {4. 8. 16}] answers: (closure valueWithArguments: {4. 8. 16}).
	indirect:: 4. (* write after capture forces use of indirection vector *)
)
) : (
TEST_CONTEXT = ()
)
public class SuperSimulationTests = TestContext () (
foo = (
	^'super'
)
fooWithArg: n = (
	^'super'
)
) : (
)
class TestBase = TestContext () (
assertSet: actual equals: expected = (
	| missing extra missingString extraString |
	missing:: Set new.
	missing addAll: expected.
	actual do: [:element | missing remove: element ifAbsent: []].
	extra:: Set new.
	extra addAll: actual.
	expected do: [:element | extra remove: element ifAbsent: []].
	(missing isEmpty and: [extra isEmpty]) ifTrue: [^self].	
	
	missingString: ''.
	missing do: [:element | missingString: missingString, ' ', element printString].
	extraString: ''.
	extra do: [:element | extraString: extraString, ' ', element printString].
	
	failWithMessage: 'Missing:', missingString, ' Extra:', extraString.
)
in: collection findMirrorNamed: name = (
	collection do: [:mirror | mirror name = name ifTrue: [^mirror]].
	^nil
)
) : (
)
baz = (
	^'enclosing'
)
foo = (
	^'enclosing'
)
fooWithArg: n = (
	^'enclosing'
)
) : (
)

Newspeak3
'NSCollections'
class CollectionsTesting usingCollections: c minitest: m = (|
private TestContext = m TestContext.

private List = c List.
private Map = c Map.
private Set = c Set.
|) (
public class CollectionTests = TestContext () (
'as yet unclassified'
public testArrayList = (
	| list = List new. |
	assert: list size equals: 0.
	assert: list isEmpty.
	should: [list at: 0] signal: rangeError.
	should: [list at: -1] signal: rangeError.

	list addLast: 10.
	assert: list size equals: 1.
	deny: list isEmpty.
	should: [list at: 0] signal: rangeError.
	assert: (list at: 1) equals: 10.
	should: [list at: 2] signal: rangeError.

	list addFirst: 20.
	assert: list size equals: 2.
	should: [list at: 0] signal: rangeError.
	assert: (list at: 1) equals: 20.
	assert: (list at: 2) equals: 10.
	should: [list at: 3] signal: rangeError.

	list include: 20.
	assert: list size equals: 2.
	should: [list at: 0] signal: rangeError.
	assert: (list at: 1) equals: 20.
	assert: (list at: 2) equals: 10.
	should: [list at: 3] signal: rangeError.
	
	assert: (list at: 2 put: 30) equals: 30.
	should: [list at: 0 put: nil] signal: rangeError.
	should: [list at: 3 put: nil] signal: rangeError.
	
	assert: (list includes: 30).
	deny: (list includes: 10).
	
	assert: list removeLast equals: 30.
	assert: list size equals: 1.
	should: [list at: 0] signal: rangeError.
	assert: (list at: 1) equals: 20.
	should: [list at: 2] signal: rangeError.
)
public testArrayListEnumeration = (
	| list evens odds sum |
	list:: List withAll: {1. 2. 3. 4. 5. 6. 7. 8. 9}.

	evens:: list select: [:e | e \\ 2 = 0].
	assert: evens size equals: 4.

	odds:: list reject: [:e | e \\ 2 = 0].
	assert: odds size equals: 5.
	
	sum:: list inject: 0 into: [:a :b | a + b].
	assert: sum equals: 45.
	
	sum:: list reduce: [:a :b | a + b] ifEmpty: [fail].
	assert: sum equals: 45.

	sum:: list reduce: [:a :b | a + b].
	assert: sum equals: 45.

	assert: (list anySatisfy: [:e | e > 0]).
	assert: (list allSatisfy: [:e | e > 0]).
	deny: (list noneSatisfy: [:e | e > 0]).

	deny: (list anySatisfy: [:e | e < 0]).
	deny: (list allSatisfy: [:e | e < 0]).
	assert: (list noneSatisfy: [:e | e < 0]).

	assert: (list detect: [:e | e > 5]) equals: 6.
	assert: (list detect: [:e | e > 55] ifNone: ['None']) equals: 'None'.
)
public testHashMap = (
	| map = Map new. |
	assert: map size equals: 0.
	assert: map isEmpty.
	should: [map at: 'A'] signal: rangeError.
	
	assert: (map at: 'A' put: 'AA') equals: 'AA'.
	assert: (map at: 'B' put: 'BB') equals: 'BB'.
	assert: (map at: 'C' put: 'CC') equals: 'CC'.
	assert: map size equals: 3.
	deny: map isEmpty.
	assert: (map at: 'A') equals: 'AA'.
	assert: (map at: 'B') equals: 'BB'.
	assert: (map at: 'C') equals: 'CC'.
	should: [map at: 'D'] signal: rangeError.
	assert: (map at: 'D' ifAbsent: ['None']) equals: 'None'.

	deny: (map includesKey: 'D').
	assert: (map at: 'D' ifAbsentPut: ['DD']) equals: 'DD'.
	assert: (map at: 'D' ifAbsentPut: [fail]) equals: 'DD'.
	assert: (map includesKey: 'D').
	
	assert: (map removeKey: 'B') equals: 'BB'.
	should: [map removeKey: 'B'] signal: rangeError.
	assert: (map removeKey: 'B' ifAbsent: ['None']) equals: 'None'.

	assert: (map at: 'A' put: 'newAA') equals: 'newAA'.
	assert: (map at: 'A') equals: 'newAA'.
	
	assert: map size equals: 3.
)
public testHashMap2 = (
	| map = Map new. |

	map at: 'A' put: 'newAA'.
	map at: 'C' put: 'CCC'.
	map at: 'D' ifAbsentPut: ['DD'].
	
	assert: [map values isKindOfList].
	assert: [map values size = 3].
	assert: [map keys size = 3].
	assert: [map keys isKindOfSet].
	
	assert: [map includes: 'newAA'].
	assert: [map includes: 'CCC'].
	assert: [map includes: 'DD'].
	assert: [(map includes: 'B') not].

	map do: [:e | assert: [e size > 1]].
	
	assert: [(map collect: [:e | e size = 2]) isKindOfList].
	assert: [(map collect: [:e | e size]) includes: 5].
	assert: [(map collect: [:e | e size]) includes: 3].
	assert: [(map collect: [:e | e size]) includes: 2].
	
	assert: [(map select: [:e | e size > 2]) isKindOfList].
	assert: [(map select: [:e | e size > 3]) size = 1].
	assert: [(map select: [:e | e size < 4]) size = 2].
	
	assert: [(map reject: [:e | e size > 2]) isKindOfList].
	assert: [(map reject: [:e | e size > 2]) size = 1].
	assert: [(map reject: [:e | e size < 3]) size = 2].
			
	assert: (map detect: [:e | e = 'DD']) equals: 'DD'.
)
public testHashSet = (
	| set = Set new. |
	assert: set size equals: 0.
	assert: set isEmpty.
	should: [set at: 0] signal: rangeError.
	
	assert: (set add: 2) equals: 2.
	assert: set size equals: 1.
	deny: set isEmpty.
	
	assert: (set add: 2) equals: 2.
	assert: set size equals: 1.

	set add: 4; include: 6; add: 8.
	set addAll: {1. 2. 3. 4}.
	assert: set size equals: 6.
	
	assert: (set remove: 3) equals: 3.
	assert: set size equals: 5.

	set removeAllSuchThat: [:e | e \\ 2 = 0].
	assert: set size equals: 1.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class ListTests = TestContext () (
'as yet unclassified'
public testListAdd = (
	| list = List new: 0. |
	assert: list size equals: 0.

	list add: 'apple'.
	assert: list size equals: 1.
	assert: (list at: 1) equals: 'apple'.
	
	list add: 'banana'.
	assert: list size equals: 2.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.

	list add: 'orange'.
	assert: list size equals: 3.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.
	assert: (list at: 3) equals: 'orange'.

	list add: 'strawberry'.
	assert: list size equals: 4.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.
	assert: (list at: 3) equals: 'orange'.
	assert: (list at: 4) equals: 'strawberry'.

	list add: 'watermelon'.
	assert: list size equals: 5.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.
	assert: (list at: 3) equals: 'orange'.
	assert: (list at: 4) equals: 'strawberry'.
	assert: (list at: 5) equals: 'watermelon'.
)
public testListAddAll = (
	| list = List new: 0. |
	assert: list size equals: 0.

	list addAll: {'apple'. 'banana'}.
	assert: list size equals: 2.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.

	list addAll: {}.
	assert: list size equals: 2.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.

	list addAll: {'orange'. 'strawberry'. 'watermelon'}.
	assert: list size equals: 5.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.
	assert: (list at: 3) equals: 'orange'.
	assert: (list at: 4) equals: 'strawberry'.
	assert: (list at: 5) equals: 'watermelon'.
)
public testListAddFirst = (
	| list = List new: 0. |
	assert: list size equals: 0.

	list addFirst: 'apple'.
	assert: list size equals: 1.
	assert: (list at: 1) equals: 'apple'.
	
	list addFirst: 'banana'.
	assert: list size equals: 2.
	assert: (list at: 1) equals: 'banana'.
	assert: (list at: 2) equals: 'apple'.

	list addFirst: 'orange'.
	assert: list size equals: 3.
	assert: (list at: 1) equals: 'orange'.
	assert: (list at: 2) equals: 'banana'.
	assert: (list at: 3) equals: 'apple'.

	list addFirst: 'strawberry'.
	assert: list size equals: 4.
	assert: (list at: 1) equals: 'strawberry'.
	assert: (list at: 2) equals: 'orange'.
	assert: (list at: 3) equals: 'banana'.
	assert: (list at: 4) equals: 'apple'.

	list addFirst: 'watermelon'.
	assert: list size equals: 5.
	assert: (list at: 1) equals: 'watermelon'.
	assert: (list at: 2) equals: 'strawberry'.
	assert: (list at: 3) equals: 'orange'.
	assert: (list at: 4) equals: 'banana'.
	assert: (list at: 5) equals: 'apple'.
)
public testListAsArray = (
	| list = List new. array |
	list add: 'blueberry'.
	list add: 'blackberry'.
	
	array:: list asArray.
	assert: array isArray.
	assert: array size equals: 2.
	assert: (array at: 1) equals: 'blueberry'.
	assert: (array at: 2) equals: 'blackberry'.
	
	array at: 1 put: 'cantalope'.
	array at: 2 put: 'watermelon'.
	assert: (list at: 1) equals: 'blueberry'.
	assert: (list at: 2) equals: 'blackberry'.
)
public testListAt = (
	| list empty |
	list:: List new.
	list add: 'apple'.
	list add: 'banana'.

	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.
	should: [list at: 0] signal: rangeError.
	should: [list at: 3] signal: rangeError.
	should: [list at: -3] signal: rangeError.
	should: [list at: nil] signal: Error.
	
	empty:: List new.
	should: [empty at: 1] signal: rangeError.
)
public testListAtPut = (
	| list empty |
	list:: List new.
	list add: 'apple'.
	list add: 'banana'.
		
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.
	assert: list size equals: 2.

	assert: (list at: 1 put: 'orange') equals: 'orange'.
	assert: (list at: 1) equals: 'orange'.
	assert: (list at: 2) equals: 'banana'.
	assert: list size equals: 2.

	assert: (list at: 2 put: 'kiwi') equals: 'kiwi'.
	assert: (list at: 1) equals: 'orange'.
	assert: (list at: 2) equals: 'kiwi'.
	assert: list size equals: 2.

	should: [list at: 0 put: 'pineapple'] signal: rangeError.
	should: [list at: 3 put: 'pineapple'] signal: rangeError.
	should: [list at: -3 put: 'pineapple'] signal: rangeError.
	should: [list at: nil put: 'pineapple'] signal: Error.
	
	empty:: List new.
	should: [empty at: 1 put: 'orange'] signal: Error.
)
public testListConcatenation = (
	| 
	a = List new.
	b = List new.
	c
	|
	a add: 'apple'.
	b add: 'banana'.
	b add: 'orange'.
	b add: 'strawberry'.
	c:: a, b.
	
	assert: c size equals: 4.
	assert: (c at: 1) equals: 'apple'.
	assert: (c at: 2) equals: 'banana'.
	assert: (c at: 3) equals: 'orange'.
	assert: (c at: 4) equals: 'strawberry'.
	
	c add: 'pineapple'.
	assert: c size equals: 5.
	assert: (c at: 5) equals: 'pineapple'.
	
	assert: a size equals: 1.
	assert: (a at: 1) equals: 'apple'.
	assert: b size equals: 3.
	assert: (b at: 1) equals: 'banana'.
	assert: (b at: 2) equals: 'orange'.
	assert: (b at: 3) equals: 'strawberry'.
)
public testListEqualityIsIdentity = (
	|
	empty1 = List new.
	empty2 = List new.
	simple1 = List new.
	simple2 = List new.
	cycle1 = List new.
	cycle2 = List new.
	|
	simple1 add: 'strawberry'.
	simple2 add: 'strawberry'.
	cycle1 add: cycle1.
	cycle2 add: cycle2.
		
	assert: empty1 equals: empty1.
	assert: empty2 equals: empty2.
	deny: empty1 equals: empty2.
	deny: empty2 equals: empty1.
	
	assert: simple1 equals: simple1.
	assert: simple2 equals: simple2.
	deny: simple1 equals: simple2.
	deny: simple2 equals: simple1.

	assert: cycle1 equals: cycle1.
	assert: cycle2 equals: cycle2.
	deny: cycle1 equals: cycle2.
	deny: cycle2 equals: cycle1.
)
public testListFirstLast = (
	| list = List new. empty = List new. |
	list add: 'apple'.
	list add: 'banana'.
	
	assert: (list first) equals: 'apple'.
	assert: (list last) equals: 'banana'.

	should: [empty first] signal: Error.
	should: [empty last] signal: Error.
)
public testListFloatIndex = (
	| list = List new. |
	list add: 'apple'.
	
	should: [list at: 1 asFloat] signal: Error.
	should: [list at: 1 asFloat put: 'banana'] signal: Error.
)
public testListIndexOf = (
	| list = List new. empty = List new. |
	list add: 42.
	list add: nil.
	list add: 'apple'.
	list add: 'banana'.
	list add: 'apple'.
	list add: 'banana'.
	
	assert: (list indexOf: 42) equals: 1.
	assert: (list indexOf: nil) equals: 2.
	assert: (list indexOf: 'apple') equals: 3.
	assert: (list indexOf: 'banana') equals: 4.
	assert: (list indexOf: 'noSuchElement') equals: 0.

	assert: (empty indexOf: 'noSuchElement') equals: 0.
)
public testListIsEmpty = (
	| list |
	assert: (List new: 0) isEmpty.
	assert: (List new: 16) isEmpty.
	
	list:: List new.
	assert: list isEmpty.
	list add: #element.
	deny: list isEmpty.
)
public testListNew = (
	assert: (List new) size equals: 0.
	assert: (List new: 16) size equals: 0.
	
	should: [List new: -1] signal: Error.
	should: [List new: '10'] signal: Error.
	should: [List new: nil] signal: Error.
)
public testListRemove = (
	| list = List new: 0. |
	list add: 'apple'.
	list add: 'banana'.
	list add: 'orange'.
	list add: 'strawberry'.
	list add: 'watermelon'.
	assert: list size equals: 5.

	assert: (list remove: 'orange') equals: 'orange'.
	assert: list size equals: 4.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.
	assert: (list at: 3) equals: 'strawberry'.
	assert: (list at: 4) equals: 'watermelon'.
	
	should: [list remove: 'orange'] signal: Error.
	assert: (list remove: 'orange' ifAbsent: ['missing']) equals: 'missing'.
	
	assert: (list remove: 'apple') equals: 'apple'.
	assert: list size equals: 3.
	assert: (list at: 1) equals: 'banana'.
	assert: (list at: 2) equals: 'strawberry'.
	assert: (list at: 3) equals: 'watermelon'.
	
	assert: (list remove: 'watermelon') equals: 'watermelon'.
	assert: list size equals: 2.
	assert: (list at: 1) equals: 'banana'.
	assert: (list at: 2) equals: 'strawberry'.

	assert: (list remove: 'banana') equals: 'banana'.
	assert: list size equals: 1.
	assert: (list at: 1) equals: 'strawberry'.
	
	assert: (list remove: 'strawberry') equals: 'strawberry'.
	assert: list size equals: 0.
)
public testListRemoveAllSuchThat = (
	| list = List new: 0. |
	list add: 'apple'.
	list add: 'banana'.
	list add: 'orange'.
	list add: 'strawberry'.
	list add: 'watermelon'.
	assert: list size equals: 5.
	
	list removeAllSuchThat: [:fruit | (fruit indexOf: $n) > 0].
	assert: list size equals: 2.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'strawberry'.
)
public testListRemoveFirst = (
	| list = List new: 0. |
	list add: 'apple'.
	list add: 'banana'.
	list add: 'orange'.
	list add: 'strawberry'.
	list add: 'watermelon'.
	assert: list size equals: 5.

	assert: list removeFirst equals: 'apple'.
	assert: list size equals: 4.
	assert: (list at: 1) equals: 'banana'.
	assert: (list at: 2) equals: 'orange'.
	assert: (list at: 3) equals: 'strawberry'.
	assert: (list at: 4) equals: 'watermelon'.
	
	assert: list removeFirst equals: 'banana'.
	assert: list size equals: 3.
	assert: (list at: 1) equals: 'orange'.
	assert: (list at: 2) equals: 'strawberry'.
	assert: (list at: 3) equals: 'watermelon'.

	assert: list removeFirst equals: 'orange'.
	assert: list size equals: 2.
	assert: (list at: 1) equals: 'strawberry'.
	assert: (list at: 2) equals: 'watermelon'.

	assert: list removeFirst equals: 'strawberry'.
	assert: list size equals: 1.
	assert: (list at: 1) equals: 'watermelon'.

	assert: list removeFirst equals: 'watermelon'.
	assert: list size equals: 0.
	
	should: [list removeFirst] signal: Error.
)
public testListRemoveLast = (
	| list = List new: 0. |
	list add: 'apple'.
	list add: 'banana'.
	list add: 'orange'.
	list add: 'strawberry'.
	list add: 'watermelon'.
	assert: list size equals: 5.

	assert: list removeLast equals: 'watermelon'.
	assert: list size equals: 4.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.
	assert: (list at: 3) equals: 'orange'.
	assert: (list at: 4) equals: 'strawberry'.
	
	assert: list removeLast equals: 'strawberry'.
	assert: list size equals: 3.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.
	assert: (list at: 3) equals: 'orange'.

	assert: list removeLast equals: 'orange'.
	assert: list size equals: 2.
	assert: (list at: 1) equals: 'apple'.
	assert: (list at: 2) equals: 'banana'.

	assert: list removeLast equals: 'banana'.
	assert: list size equals: 1.
	assert: (list at: 1) equals: 'apple'.

	assert: list removeLast equals: 'apple'.
	assert: list size equals: 0.
	
	should: [list removeLast] signal: Error.
)
public testListSort = (
	| list |
	list:: List withAll: {12. 15. 3. 5. 10. 6. 8. 1. 13. 11. 16. 4. 14. 9. 2. 7}.
	assert: list size equals: 16.
	list sort: [:a :b | a < b].
	assert: list size equals: 16.
	1 to: 16 do: [:index | assert: (list at: index) equals: index].
	
	list:: List withAll: {12. 8. 9. 7. 2. 10. 4. 6. 5. 3. 13. 15. 14. 1. 11}.
	assert: list size equals: 15.
	list sort: [:a :b | a < b].
	assert: list size equals: 15.
	1 to: 15 do: [:index | assert: (list at: index) equals: index].
	
	list:: List withAll: {10. 12. 2. 11. 14. 4. 13. 3. 9. 8. 7. 5. 6. 1}.
	assert: list size equals: 14.
	list sort: [:a :b | a < b].
	assert: list size equals: 14.
	1 to: 14 do: [:index | assert: (list at: index) equals: index].
	
	list:: List withAll: {12. 6. 10. 5. 7. 9. 2. 4. 1. 11. 3. 8. 13}.
	assert: list size equals: 13.
	list sort: [:a :b | a < b].
	assert: list size equals: 13.
	1 to: 13 do: [:index | assert: (list at: index) equals: index].
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class MapTests = TestContext () (
'as yet unclassified'
public testMapNilKey = (
	| map = Map new. |
	assert: (map at: nil put: 'pear') equals: 'pear'.
	assert: map size equals: 1.
	assert: (map includesKey: nil).
	assert: (map at: nil) equals: 'pear'.

	(* Try to trigger growth/rehashing. *)
	assert: (map at: 1 put: 'apricot') equals: 'apricot'.
	assert: (map at: 2 put: 'cherry') equals: 'cherry'.
	assert: (map at: 3 put: 'mango') equals: 'mango'.
	assert: (map at: 4 put: 'nectarine') equals: 'nectarine'.
	assert: (map at: 5 put: 'lemon') equals: 'lemon'.
	assert: (map at: 6 put: 'lime') equals: 'lime'.
	assert: (map at: 7 put: 'peach') equals: 'peach'.
	assert: (map at: 8 put: 'plum') equals: 'plum'.

	assert: map size equals: 9.
	assert: (map includesKey: nil).
	assert: (map at: nil) equals: 'pear'.

	assert: (map at: 1) equals: 'apricot'.
	assert: (map at: 2) equals: 'cherry'.
	assert: (map at: 3) equals: 'mango'.
	assert: (map at: 4) equals: 'nectarine'.
	assert: (map at: 5) equals: 'lemon'.
	assert: (map at: 6) equals: 'lime'.
	assert: (map at: 7) equals: 'peach'.
	assert: (map at: 8) equals: 'plum'.
	
	assert: (map removeKey: nil) equals: 'pear'.
	assert: map size equals: 8.
	deny: (map includes: nil).
	assert: (map at: nil put: 'pineapple') equals: 'pineapple'.
	assert: map size equals: 9.
	assert: (map includesKey: nil).
	assert: (map at: nil) equals: 'pineapple'.
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
public class SetTests = TestContext () (
'as yet unclassified'
public testSetNilElement = (
	| set = Set new. |
	assert: (set add: nil) equals: nil.
	assert: set size equals: 1.
	assert: (set includes: nil).

	(* Try to trigger growth/rehashing. *)
	assert: (set add: 'apricot') equals: 'apricot'.
	assert: (set add: 'cherry') equals: 'cherry'.
	assert: (set add: 'mango') equals: 'mango'.
	assert: (set add: 'nectarine') equals: 'nectarine'.
	assert: (set add: 'lemon') equals: 'lemon'.
	assert: (set add: 'lime') equals: 'lime'.
	assert: (set add: 'peach') equals: 'peach'.
	assert: (set add: 'plum') equals: 'plum'.

	assert: set size equals: 9.
	assert: (set includes: nil).
	assert: (set includes: 'apricot').
	assert: (set includes: 'cherry').
	assert: (set includes: 'mango').
	assert: (set includes: 'nectarine').
	assert: (set includes: 'lemon').
	assert: (set includes: 'lime').
	assert: (set includes: 'peach').
	assert: (set includes: 'plum').
	
	assert: (set remove: nil) equals: nil.
	assert: set size equals: 8.
	deny: (set includes: nil).
	assert: (set add: nil) equals: nil.
	assert: set size equals: 9.
	assert: (set includes: nil).
)
) : (
'as yet unclassified'
TEST_CONTEXT = ()
)
'as yet unclassified'
rangeError = (
	(* :todo: Introduce a more specific exception. *)
	^Error
)
) : (
)

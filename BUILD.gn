# Copyright (c) 2017, the Dart project authors.  Please see the AUTHORS file
# for details. All rights reserved. Use of this source code is governed by a
# BSD-style license that can be found in the LICENSE file.

executable("primordialsoup") {
  include_dirs = [ "src" ]
  if (is_fuchsia) {
    libs = [ "magenta" ]
  } else {
    libs = [ "pthread" ]
  }
  sources = [
    "src/double-conversion/bignum-dtoa.cc",
    "src/double-conversion/bignum-dtoa.h",
    "src/double-conversion/bignum.cc",
    "src/double-conversion/bignum.h",
    "src/double-conversion/cached-powers.cc",
    "src/double-conversion/cached-powers.h",
    "src/double-conversion/diy-fp.cc",
    "src/double-conversion/diy-fp.h",
    "src/double-conversion/double-conversion.cc",
    "src/double-conversion/double-conversion.h",
    "src/double-conversion/fast-dtoa.cc",
    "src/double-conversion/fast-dtoa.h",
    "src/double-conversion/fixed-dtoa.cc",
    "src/double-conversion/fixed-dtoa.h",
    "src/double-conversion/ieee.h",
    "src/double-conversion/strtod.cc",
    "src/double-conversion/strtod.h",
    "src/double-conversion/utils.h",
    "src/vm/allocation.h",
    "src/vm/assert.cc",
    "src/vm/assert.h",
    "src/vm/bitfield.h",
    "src/vm/double_conversion.cc",
    "src/vm/double_conversion.h",
    "src/vm/flags.h",
    "src/vm/globals.h",
    "src/vm/heap.cc",
    "src/vm/heap.h",
    "src/vm/interpreter.cc",
    "src/vm/interpreter.h",
    "src/vm/isolate.cc",
    "src/vm/isolate.h",
    "src/vm/large_integer.cc",
    "src/vm/lockers.h",
    "src/vm/lookup_cache.cc",
    "src/vm/lookup_cache.h",
    "src/vm/main.cc",
    "src/vm/math.h",
    "src/vm/message.cc",
    "src/vm/message.h",
    "src/vm/object.cc",
    "src/vm/object.h",
    "src/vm/os.h",
    "src/vm/os_android.cc",
    "src/vm/os_fuchsia.cc",
    "src/vm/os_linux.cc",
    "src/vm/os_macos.cc",
    "src/vm/os_thread.cc",
    "src/vm/os_thread.h",
    "src/vm/os_thread_android.cc",
    "src/vm/os_thread_android.h",
    "src/vm/os_thread_fuchsia.cc",
    "src/vm/os_thread_fuchsia.h",
    "src/vm/os_thread_linux.cc",
    "src/vm/os_thread_linux.h",
    "src/vm/os_thread_macos.cc",
    "src/vm/os_thread_macos.h",
    "src/vm/os_thread_win.cc",
    "src/vm/os_thread_win.h",
    "src/vm/os_win.cc",
    "src/vm/port.cc",
    "src/vm/port.h",
    "src/vm/primitives.cc",
    "src/vm/primitives.h",
    "src/vm/random.h",
    "src/vm/snapshot.cc",
    "src/vm/snapshot.h",
    "src/vm/thread.cc",
    "src/vm/thread.h",
    "src/vm/thread_pool.cc",
    "src/vm/thread_pool.h",
    "src/vm/utils.h",
    "src/vm/utils_android.h",
    "src/vm/utils_fuchsia.h",
    "src/vm/utils_linux.h",
    "src/vm/utils_macos.h",
    "src/vm/utils_win.h",
    "src/vm/virtual_memory.h",
    "src/vm/virtual_memory_android.cc",
    "src/vm/virtual_memory_fuchsia.cc",
    "src/vm/virtual_memory_linux.cc",
    "src/vm/virtual_memory_macos.cc",
    "src/vm/virtual_memory_win.cc",
  ]
}

action("snapshots") {
  deps = [
    ":primordialsoup($host_toolchain)",
  ]

  newspeak_sources = [
    "src/newspeak/AccessModifierTesting.ns",
    "src/newspeak/AccessModifierTestingConfiguration.ns",
    "src/newspeak/ActivationMirrorTesting.ns",
    "src/newspeak/ActivationMirrorTestingConfiguration.ns",
    "src/newspeak/ActorsForPrimordialSoup.ns",
    "src/newspeak/ActorsTesting.ns",
    "src/newspeak/ActorsTestingConfigurationForPrimordialSoup.ns",
    "src/newspeak/BenchmarkRunner.ns",
    "src/newspeak/ClosureDefFibonacci.ns",
    "src/newspeak/ClosureFibonacci.ns",
    "src/newspeak/CollectionsForPrimordialSoup.ns",
    "src/newspeak/CollectionsTesting.ns",
    "src/newspeak/CollectionsTestingConfiguration.ns",
    "src/newspeak/CombinatorialParsing.ns",
    "src/newspeak/CompilerApp.ns",
    "src/newspeak/DeltaBlue.ns",
    "src/newspeak/GUIBenchmarkRunner.ns",
    "src/newspeak/HelloApp.ns",
    "src/newspeak/IntermediatesForPrimordialSoup.ns",
    "src/newspeak/Kernel.ns",
    "src/newspeak/KernelForPrimordialSoup.ns",
    "src/newspeak/KernelTests.ns",
    "src/newspeak/KernelTestsConfiguration.ns",
    "src/newspeak/KernelWeakTests.ns",
    "src/newspeak/KernelWeakTestsPrimordialSoupConfiguration.ns",
    "src/newspeak/MethodFibonacci.ns",
    "src/newspeak/Minitest.ns",
    "src/newspeak/MinitestTests.ns",
    "src/newspeak/MinitestTestsConfiguration.ns",
    "src/newspeak/MirrorBuilderTesting.ns",
    "src/newspeak/MirrorBuilderTestingConfiguration.ns",
    "src/newspeak/MirrorTesting.ns",
    "src/newspeak/MirrorTestingConfiguration.ns",
    "src/newspeak/MirrorTestingModel.ns",
    "src/newspeak/MirrorsForPrimordialSoup.ns",
    "src/newspeak/NLRImmediate.ns",
    "src/newspeak/NLRLoop.ns",
    "src/newspeak/NS2PrimordialSoupCompilerTestingConfiguration.ns",
    "src/newspeak/Newspeak2SqueakCompilation.ns",
    "src/newspeak/NewspeakASTs.ns",
    "src/newspeak/NewspeakCompilation.ns",
    "src/newspeak/NewspeakGrammar.ns",
    "src/newspeak/NewspeakParsing.ns",
    "src/newspeak/ParserCombinators.ns",
    "src/newspeak/PrimordialFuel.ns",
    "src/newspeak/PrimordialFuelTestApp.ns",
    "src/newspeak/PrimordialFuelTesting.ns",
    "src/newspeak/PrimordialFuelTestingConfiguration.ns",
    "src/newspeak/PrimordialSoupTracer.ns",
    "src/newspeak/Richards.ns",
    "src/newspeak/RuntimeForPrimordialSoup.ns",
    "src/newspeak/RuntimeWithBuildersForPrimordialSoup.ns",
    "src/newspeak/SlotRead.ns",
    "src/newspeak/SlotWrite.ns",
    "src/newspeak/Splay.ns",
    "src/newspeak/TestActor.ns",
    "src/newspeak/TestRunner.ns",
  ]
  rebased_newspeak_sources = []
  foreach(newspeak_source, newspeak_sources) {
    rebased_newspeak_sources += [ rebase_path(newspeak_source) ]
  }

  bootstrap_compiler_snapshot = rebase_path("snapshots/compiler.vfuel")

  inputs = newspeak_sources + [ bootstrap_compiler_snapshot ]

  hello_snapshot = "$target_gen_dir/HelloApp.vfuel"
  tests_snapshot = "$target_gen_dir/TestRunner.vfuel"
  benchmarks_snapshot = "$target_gen_dir/BenchmarkRunner.vfuel"
  compiler_snapshot = "$target_gen_dir/CompilerApp.vfuel"

  outputs = [
    hello_snapshot,
    tests_snapshot,
    benchmarks_snapshot,
    compiler_snapshot,
  ]

  host_primordialsoup_dir =
      get_label_info(":primordialsoup($host_toolchain)", "root_out_dir")
  host_primordialsoup = rebase_path("$host_primordialsoup_dir/primordialsoup")

  script = host_primordialsoup
  args = [ bootstrap_compiler_snapshot ]
  args += rebased_newspeak_sources
  args += [
    "RuntimeForPrimordialSoup",
    "HelloApp",
    rebase_path(hello_snapshot),

    "RuntimeWithBuildersForPrimordialSoup",
    "TestRunner",
    rebase_path(tests_snapshot),

    "RuntimeForPrimordialSoup",
    "BenchmarkRunner",
    rebase_path(benchmarks_snapshot),

    "RuntimeWithBuildersForPrimordialSoup",
    "CompilerApp",
    rebase_path(compiler_snapshot),
  ]
}

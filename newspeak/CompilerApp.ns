Newspeak3
'NS2PrimordialSoup'
class CompilerApp packageUsing: manifest = (
) (
class CommandLineCompiler usingPlatform: platform = (
|
	private List = platform collections List.
	private Map = platform collections Map.
	private ClassDeclarationBuilder = platform mirrors ClassDeclarationBuilder.
	private Port = platform actors Port.
	private Snapshotter = platform victoryFuel Snapshotter.
|
) (
childMain: args = (
	| replyPort result |
	replyPort:: Port fromId: (args at: 2).
	result:: List new.

	3 to: args size do: [:index | result add: (compileFile: (args at: index))].

	replyPort send: result asArray.
)
compileFile: filename = (
	| source builder |
	source:: String withAll: (readFileAsBytes: filename).
	^[builder:: ClassDeclarationBuilder fromSource: source.
	  builder install applyToObject reflectee]
		on: Exception
		do: [:ex | describeError: ex path: filename source: source. ex pass].
)
describeError: ex path: path source: source = (
	ex isKindOfParseError
		ifTrue:
			[ | line ::= 1. lastLine ::= 0. column |
			 1 to: ex position do:
				[:index | (source at: index) = 10 (* LF *) ifTrue:
					[line:: line + 1. lastLine:: index]].
			 column:: ex position - lastLine.
			 (* This matches GCC's format, which lets various tools automatically jump to the position. *)
			 (path, ':', line asString, ':', column asString, ': error: ', ex message) out]
		ifFalse:
			[(path, ':0: error: ', ex printString) out].
)
public main: args = (
	(args at: 1) = 'child'
		ifTrue: [childMain: args]
		ifFalse: [parentMain: args].
)
parentMain: args = (
	|
	namespace = Map new.
	manifest = Manifest forNamespace: namespace.
	port = Port new.
	numJobs = 4.
	workLists
	stopwatch
	index ::= 1.
	outstanding ::= 0.
	|

	workLists:: Array new: numJobs.
	1 to: numJobs do: [:i | workLists at: i put: List new].
	[(args at: index) endsWith: '.ns'] whileTrue:
		[(workLists at: index \\ numJobs + 1) add: (args at: index).
		 index:: index + 1].

	workLists do:
		[:workList |
		 workList addFirst: port id.
		 workList addFirst: 'child'.
		 port spawn: workList asArray.
		 outstanding:: outstanding + 1].

	port handler:
		[:klasses |
		klasses do: [:klass | namespace at: klass name put: klass].
		outstanding:: outstanding - 1.
		outstanding = 0 ifTrue:
			[port close.
			 [(index + 2) <= args size] whileTrue:
				[ | runtimeName appName snapshotName runtime app fuel bytes |
				runtimeName:: args at: index.
				appName:: args at: index + 1.
				snapshotName:: args at: index + 2.
				index:: index + 3.

				runtime:: (namespace at: runtimeName) packageRuntimeUsing: manifest.
				app:: (namespace at: appName) packageUsing: manifest.

				bytes:: Snapshotter new snapshotApp: app withRuntime: runtime.
				writeBytes: bytes toFileNamed: snapshotName]]].
)
readFileAsBytes: filename = (
	(* :literalmessage: primitive: 130 *)
	halt.
)
writeBytes: bytes toFileNamed: filename = (
	(* :literalmessage: primitive: 128 *)
	halt.
)
) : (
)
class Manifest forNamespace: ns = (|
namespace = ns.
|) (
protected doesNotUnderstand: message = (
	^namespace at: message selector ifAbsent: [Error signal: 'Missing ', message selector]
)
) : (
)
public main: platform args: args = (
	^(CommandLineCompiler usingPlatform: platform) main: args
)
) : (
)

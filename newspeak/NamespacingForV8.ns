Newspeak3
'HopscotchIDE'
class NamespacingForV8 usingPlatform: p = (
(* Unlike most languages, Newspeak has no global namespace. The IDE, however, as an extra-linguistic tool does provide a namespace. This namespace is stateless and only contains Values, typically top-level classes or other namespaces. It is used by an application definition in its #packageUsing: to collect the pieces of a program or by a test configuration in #packageTestsUsing:.

Gilad notes on 12/18/13:

We need to decide on the semantics of these things.  Here is a proposal:

Namespaces nest and act like scopes. In a given namespace, one can access the elements defined in it, and those of its parents. A name in a namespace shadows (not overrides! these are not classes) the same name in its parents.

The IDE maintains a current namespace that all operations are relative to. Creating a top level class adds a new one to the current namespace, but editing a class looks the class up whereever it is in the parent chain, and edits that version. One should warn if a new class shadows an existing one, and allow to clone a class from one namespace to another.

The namespace presenter shows a namespaces local entries and a collapsed entry for its parent. Expanding parents recursively gives you a flat view of the scope. Elements that shadow or are shadowed should be marked. Perhaps a complete view of the scope with shadoowed elements removed is useful too.

Copyright 2008 Cadence Design Systems, Inc.
Copyright 2012 Cadence Design Systems, Inc.
Copyright 2013 Ryan Macnak
Copyright 2013 Google Inc.

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
*)
| (* imports *)
	private ClassMirror = p mirrors ClassMirror.
	private ObjectMirror = p mirrors ObjectMirror.
	private Map = p collections Map.
	(* module variables *)
	public Root <Map[Symbol, Behavior | String | Form]> = p collections Map new.
	public Categories = Namespace new.
	public manifest = Manifest forNamespace: Root.
|) (
class CategoryNamespace forCategory: c = Namespace (|
protected category <Symbol> = c.
|) (
public at: key put: value = (
	(*value isKindOfBehavior ifTrue: [value mixin category: category].*)
	Root at: key asSymbol put: value.
	^super at: key asSymbol put: value
)
public isKindOfCategoryNamespace = (
	^true
)
) : (
)
class Manifest forNamespace: ns = (
	|
	private namespace = ns.
	|
) (
protected doesNotUnderstand: message <Message> = (
	^namespace at: message selector
)
) : (
)
class Namespace = (
(* A mapping between unary selectors and Values. *)
|
	protected _dictionary ::= Map new.
|) (
public at: symbol <Symbol> ^<Value> = (
	^_dictionary at: symbol
)
public at: symbol <Symbol> ifAbsent: onAbsent <[Value]> ^<Value> = (
	^_dictionary at: symbol ifAbsent: onAbsent
)
public at: symbol <Symbol> ifAbsentPut: onAbsent <Value> ^<Value> = (
	(*assert: [symbol isSymbol and: [symbol isUnary]] message: 'Invalid key', symbol printString.*)
	^_dictionary at: symbol ifAbsentPut: onAbsent
)
public at: symbol <Symbol> put: value <Value> ^<Value> = (
	(*assert: [symbol isSymbol and: [symbol isUnary]] message: 'Invalid key'.*)
	^_dictionary at: symbol put: value
)
public includesKey: symbol <Symbol> ^<Boolean> = (
	^_dictionary includesKey: symbol
)
public isKindOfNamespace ^ <Boolean> = (
	^true
)
public keys ^ <Collection[Symbol]> = (
	^_dictionary keys
)
public keysAndValuesDo: binaryBlock <[:Symbol :Value]> = (
	_dictionary keysAndValuesDo: binaryBlock
)
public removeAll = (
	_dictionary: Map new.
)
public removeKey: name <Symbol> ^<Value> = (
	^_dictionary removeKey: name
)
public removeKey: name <Symbol> ifAbsent: onAbsent ^<Value> = (
	^_dictionary removeKey: name ifAbsent: onAbsent
)
) : (
)
public categoryNamespace: cat = (
	^Categories at: cat ifAbsentPut: [CategoryNamespace forCategory: cat].
)
categoryOf: o <Object> = (
	o isKindOfString ifTrue: [^#Text].
	o isKindOfImage ifTrue: [^#Icons]. (* isForm won't work on web *)
	(* o isKindOfBehavior ifTrue: [^(ClassMirror reflecting: o) mixin declaration header category asSymbol].*)
	^#Unknown
)
public freshNamespace = (
	^Namespace new
)
public refreshCategoryNamespaces = (
	#NAMESPACEBOGUS.
	Categories keysAndValuesDo:
		[:k :v | v removeAll].
	Root keysAndValuesDo:
		[:k :v | | cat ns |
		cat:: categoryOf: v.
		ns:: categoryNamespace: cat.
		ns at: k asSymbol put: v].
)
public removeKey: key <Symbol> ^ <Object> = (
	| value <Object> |
	#NAMESPACEBOGUS.
	value:: Root removeKey: key.
	refreshCategoryNamespaces.
	^value
)
) : (
)
